import React, { useState } from "react";
import { Button, Checkbox, Col, Form, Input, Row } from "antd";
import { useFrappeGetCall, useFrappePostCall } from "frappe-react-sdk";
import { _defaultHeaders } from "../api/queries";
import { setCookie } from "../lib/cookies";
import { useNavigate } from "react-router-dom";

const Login = () => {
  const [loginSequence, setLoginSequence] = useState(false);
  const [credentials, setCredentials] = useState({});
  const onFinish = (values) => {
    setCredentials((prevState) => values);
    setLoginSequence((prevState) => !loginSequence);
  };
  const onFinishFailed = (errorInfo) => {
    console.log("Failed:", errorInfo);
  };
  const updateLoginSequence = () => {
    setLoginSequence((prevState) => !loginSequence);
  };
  return (
    <>
      <Row
        style={{
          display: "flex",
          alignItems: "center",
          justifyItems: "center",
          justifyContent: "center",
        }}
      >
        <Col
          xs={24}
          sm={24}
          md={24}
          lg={24}
          xl={24}
          xxl={24}
          style={{
            marginRight: "30%",
            marginLeft: "30%",
          }}
        >
          {/* <p>
            Please login by entering your details below. Your Voter ID is
            generated by the system and was securely sent to your registered
            phone number. The Member ID is the official number given to you by
            your institution. We will send you an OTP via SMS for verification.
            Everything is tracked by our blockchain technology!
          </p> */}
        </Col>
        <Col>
          <Form
            name="basic"
            labelCol={{
              span: 8,
            }}
            wrapperCol={{
              span: 16,
            }}
            style={{
              maxWidth: 1000,
            }}
            initialValues={{
              remember: true,
            }}
            onFinish={onFinish}
            onFinishFailed={onFinishFailed}
            autoComplete="off"
          >
            <Form.Item
              label="Voter ID"
              name="voter_id"
              rules={[
                {
                  required: true,
                  message: "Please input your Voter ID!",
                },
              ]}
            >
              <Input />
            </Form.Item>

            <Form.Item
              label="Member ID"
              name="member_id"
              rules={[
                {
                  required: true,
                  message: "Please input your Member ID!",
                },
              ]}
            >
              <Input />
            </Form.Item>

            <Form.Item
              name="remember"
              valuePropName="checked"
              wrapperCol={{
                offset: 8,
                span: 16,
              }}
            >
              <Checkbox>Remember me</Checkbox>
            </Form.Item>

            <Form.Item
              wrapperCol={{
                offset: 8,
                span: 16,
              }}
            >
              <Button type="primary" htmlType="submit">
                LOGIN
              </Button>
            </Form.Item>
          </Form>
        </Col>
      </Row>
      <Row>
        {loginSequence ? (
          <LoginAction
            params={credentials}
            updateLoginSequence={updateLoginSequence}
          />
        ) : null}
      </Row>
    </>
  );
};
const LoginActionPost = async ({ params, updateLoginSequence }) => {
  const navigate = useNavigate();
  const method = "vote.utils.election_details.authenticate_voter";

  const { result, loading, error, call, reset } = useFrappePostCall(method);
  const res = await call(params);
  if (loading) {
    return (
      <>
        <p>Validating...</p>
      </>
    );
  }
  if (error) {
    return <>{JSON.stringify(error)}</>;
  }
  if (result) {
    if (result.status === "success") {
      updateLoginSequence();
      setCookie("voter_login_credentials", JSON.stringify(params), 4);
      navigate("/otp-confirm");
    } else {
      return (
        <>
          <p style={{ color: "red" }}>{data.error}</p>
        </>
      );
    }
    // return <>{JSON.stringify(data)}</>;
  }
};
const LoginAction = ({ params, updateLoginSequence }) => {
  const navigate = useNavigate();
  const method = "vote.utils.election_details.authenticate_voter";
  const { data, error, isValidating, mutate } = useFrappeGetCall(method, {
    ...params,
    ..._defaultHeaders,
  });
  if (isValidating) {
    return (
      <>
        <p>Validating...</p>
      </>
    );
  }
  if (error) {
    return <>{JSON.stringify(error)}</>;
  }
  if (data) {
    if (data.status === "success") {
      setCookie("voter_login_credentials", JSON.stringify(params), 4);
      navigate("/otp-confirm");
    } else {
      return (
        <>
          <p style={{ color: "red" }}>{data.error}</p>
        </>
      );
    }
    // return <>{JSON.stringify(data)}</>;
  }
};

export default Login;
